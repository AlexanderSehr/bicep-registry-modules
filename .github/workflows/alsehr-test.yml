name: ".Test Diff"

on:
    workflow_dispatch:
    push:
        branches:
            - main
        # paths:
        #     - ".github/workflows/alsehr-test.yml"

jobs:
    run_pipeline:
        runs-on: ubuntu-latest
        name: "Run pipeline"
        steps:
            - name: "Checkout"
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: "Test diff"
              shell: pwsh
              run: |
                  function Get-GitBranchName {
                      # Get branch name from Git
                      $BranchName = git branch --show-current

                      # If git could not get name, try GitHub variable
                      if ([string]::IsNullOrEmpty($BranchName) -and (Test-Path env:GITHUB_REF_NAME)) {
                          $BranchName = $env:GITHUB_REF_NAME
                      }

                      return $BranchName
                  }

                  function Get-GitDiff {

                      [CmdletBinding()]
                      param (
                          [Parameter()]
                          [switch] $PathOnly,

                          [Parameter()]
                          [string] $PathFilter
                      )

                      $currentBranch = Get-GitBranchName
                      $inUpstream = $true # (git remote get-url origin) -match '\/Azure\/' # If in upstream the value would be [https://github.com/Azure/bicep-registry-modules.git]

                      if ($inUpstream -and $currentBranch -eq 'main') {
                          Write-Verbose 'Currently in the upstream branch [main].' -Verbose
                          # Get the previous current and current commit
                          $compareWithCommit, $compareFromCommit = ((git log -2 --format=%H).Substring(0, 7) -split '\n') # Upstream main-1 vs upstream main latest
                          Write-Verbose ('Fetching changes of previous commit [{0}] against latest commit [{1}] in upstream main.' -f $compareFromCommit, $compareWithCommit) -Verbose
                      } else {
                          Write-Verbose ("{0} branch [$currentBranch]" -f ($inUpstream ? 'Currently in the upstream' : 'Currently in the fork')) -Verbose

                          Write-Debug 'Adding upstream repository reference'
                          git remote add 'upstream' 'https://github.com/Azure/bicep-registry-modules.git' 2>$null # Add remote source if not already added
                          Write-Debug 'Fetching latest changes from [upstream]'
                          git fetch 'upstream' 'main' -q # Fetch the latest changes from upstream main
                          Start-Sleep 5 # Wait for git to finish adding the remote

                          $compareFromCommit = git rev-parse --short=7 'upstream/main' # Get main's latest commit in upstream
                          $compareWithCommit = (git log -1 --format=%H).Substring(0, 7) # Get the current commit

                          Write-Verbose ('Fetching changes of latest upstream [main] commit [{0}] against current commit [{1}].' -f $compareFromCommit, $compareWithCommit) -Verbose
                      }

                      $diffInput = @(
                          '--diff-filter=AM',
                          $compareFromCommit,
                          $compareWithCommit,
                          ((-not [String]::IsNullOrEmpty($PathFilter)) ? '--' : $null),
                          $PathFilter
                      ) | Where-Object { $_ }
                      $modifiedFiles = git diff $diffInput ($PathOnly ? '--name-only' : '')

                      $stats = git diff --diff-filter=AM $diffInput --stat
                      if ($stats.Count -gt 0) {
                          Write-Verbose ("[{0}] Plain diff files found `git diff`:`n[{1}]" -f $stats.Count, ($stats | ConvertTo-Json | Out-String)) -Verbose
                      } else {
                          Write-Verbose 'Plain diff files found via `git diff`.' -Verbose
                      }

                      if ($PathOnly) {
                          # Returns only the paths of the changed files, not the changes themselves
                          return $modifiedFiles | Get-Item -Force -ErrorAction 'SilentlyContinue' # Silently continue to ignore files that were removed
                      }

                      return $modifiedFiles
                  }
                  Get-GitDiff -PathOnly
